// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  email             String                 @unique
  name              String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  deletedAt         DateTime?
  identityProviders UserIdentityProvider[]
}

model UserIdentityProvider {
  id         String    @id @default(cuid())
  provider   String
  providerId String
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

/// @DtoCreateOptional
/// @DtoUpdateOptional  
model Calculations {
  /// @DtoReadOnly
  /// @example "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"
  id String @id @default(uuid())

  /// @example "1234567890"  
  bbl String

  /// @example "123 Main Street, Manhattan"
  buildingName String

  /// @example "123 Main Street, Manhattan"  
  address String

  /// @example "1930"
  yearBuilt String

  /// @example "6"
  stories String

  /// @example "R4"
  buildingClass String

  /// @example "2"  
  taxClass String

  /// @example "R6"
  zoning String

  /// @example "Manhattan"
  boro String

  /// @example "10000"
  totalSquareFeet String

  /// @example "10"
  totalResidentialUnits String

  /// @example "8"  
  ptacUnits String

  /// @example "5.5"
  capRate String

  /// @example "1000000"
  buildingValue String

  /// @example "{\"studio\": 2, \"one_bed\": 4, \"two_bed\": 3, \"three_plus\": 1}"
  unitMixBreakDown String

  /// @example "{\"electric\": \"60%\", \"gas\": \"40%\"}"  
  energyProfile String

  // Section 2.2 - Building-Level PTAC Calculations
  /// @DtoReadOnly
  /// @example 1234.56
  annualBuildingMMBtuCoolingPTAC Float? // N_ptacUnits × annualUnitMMBtuCoolingPTAC

  /// @DtoReadOnly  
  /// @example 2550.00
  annualBuildingMMBtuHeatingPTAC Float? // N_ptacUnits × annualUnitMMBtuHeatingPTAC

  /// @DtoReadOnly
  /// @example 3784.56  
  annualBuildingMMBtuTotalPTAC Float? // Sum of cooling + heating MMBtu

  // Section 3 - PTHP Building Calculations
  /// @DtoReadOnly
  /// @example 1200.50
  annualBuildingMMBtuHeatingPTHP Float? // PTAC heating MMBtu / COP

  /// @DtoReadOnly  
  /// @example 1234.56
  annualBuildingMMBtuCoolingPTHP Float? // Same as PTAC cooling MMBtu

  /// @DtoReadOnly
  /// @example 2435.06
  annualBuildingMMBtuTotalPTHP Float? // Sum of PTHP cooling + heating MMBtu

  // Section 4 - Energy Reduction Analysis
  /// @DtoReadOnly
  /// @example 35.67
  energyReductionPercentage Float? // (PTAC - PTHP) / PTAC × 100

  // Section 5 - Retrofit Cost Calculation  
  /// @DtoReadOnly
  /// @example 68200.00
  totalRetrofitCost Float? // (unitCost + installCost) × units × (1 + contingency)

  // Section 6 - Energy Cost Savings Calculation
  /// @DtoReadOnly
  /// @example 25500.00
  annualBuildingThermsHeatingPTAC Float? // N_ptacUnits × annualUnitThermsHeatingPTAC

  /// @DtoReadOnly
  /// @example 160000.00  
  annualBuildingKwhCoolingPTAC Float? // N_ptacUnits × annualUnitKwhCoolingPTAC

  /// @DtoReadOnly
  /// @example 21428.57
  annualBuildingKwhHeatingPTHP Float? // Calculated from COP conversion

  /// @DtoReadOnly
  /// @example 160000.00
  annualBuildingKwhCoolingPTHP Float? // Same as PTAC cooling

  /// @DtoReadOnly  
  /// @example 77000.00
  annualBuildingCostPTAC Float? // Cost calculation for PTAC system

  /// @DtoReadOnly
  /// @example 45357.14  
  annualBuildingCostPTHP Float? // Cost calculation for PTHP system

  /// @DtoReadOnly
  /// @example 31642.86
  annualEnergySavings Float? // PTAC cost - PTHP cost

  // EFLH Data for accurate PTHP heating calculations
  /// @DtoReadOnly
  /// @example 738
  eflhHours Int? // Equivalent Full Load Hours from PLUTO lookup

  /// @DtoReadOnly
  /// @example 145000.50
  annualBuildingkWhHeatingPTHP Float? // More accurate PTHP heating using EFLH

  // AI Unit Breakdown Results
  /// @DtoReadOnly
  /// @example "AI-Assumed"
  unitBreakdownSource String? // "AI-Assumed" or "User-Provided"
  
  /// @DtoReadOnly
  aiAnalysisNotes String? // AI reasoning for unit breakdown

  // Section 7 - LL97 Emissions and Compliance Analysis
  /// @DtoReadOnly
  /// @example 245.50
  emissionsBudget2024to2029 Float? // tCO2e emissions budget 2024-2029
  
  /// @DtoReadOnly
  /// @example 189.25
  emissionsBudget2030to2034 Float? // tCO2e emissions budget 2030-2034
  
  /// @DtoReadOnly
  /// @example 69.75
  emissionsBudget2035to2039 Float? // tCO2e emissions budget 2035-2039
  
  /// @DtoReadOnly
  /// @example 24.60
  emissionsBudget2040to2049 Float? // tCO2e emissions budget 2040-2049
  
  /// @DtoReadOnly
  /// @example 1250.50
  totalBuildingEmissionsLL84 Float? // Current building emissions from LL84 data
  
  /// @DtoReadOnly
  /// @example 268750.00
  annualFeeExceedingBudget2024to2029 Float? // Annual LL97 fee 2024-2029 without upgrade
  
  /// @DtoReadOnly
  /// @example 284250.00
  annualFeeExceedingBudget2030to2034 Float? // Annual LL97 fee 2030-2034 without upgrade
  
  /// @DtoReadOnly
  /// @example 317450.00
  annualFeeExceedingBudget2035to2039 Float? // Annual LL97 fee 2035-2039 without upgrade
  
  /// @DtoReadOnly
  /// @example 328650.00
  annualFeeExceedingBudget2040to2049 Float? // Annual LL97 fee 2040-2049 without upgrade
  
  /// @DtoReadOnly
  /// @example 188.65
  beCreditBefore2027 Float? // Beneficial Electrification credit before 2027
  
  /// @DtoReadOnly
  /// @example 94.33
  beCredit2027to2029 Float? // Beneficial Electrification credit 2027-2029
  
  /// @DtoReadOnly
  /// @example 1195.25
  adjustedTotalBuildingEmissions2024to2029 Float? // Building emissions after PTHP upgrade 2024-2029
  
  /// @DtoReadOnly
  /// @example 1180.50
  adjustedTotalBuildingEmissions2030to2034 Float? // Building emissions after PTHP upgrade 2030-2034
  
  /// @DtoReadOnly
  /// @example 1180.50
  adjustedTotalBuildingEmissions2035to2039 Float? // Building emissions after PTHP upgrade 2035-2039
  
  /// @DtoReadOnly
  /// @example 1180.50
  adjustedTotalBuildingEmissions2040to2049 Float? // Building emissions after PTHP upgrade 2040-2049
  
  /// @DtoReadOnly
  /// @example 15250.00
  adjustedAnnualFeeBefore2027 Float? // LL97 fee with upgrade and BE credit before 2027
  
  /// @DtoReadOnly
  /// @example 25450.00
  adjustedAnnualFee2027to2029 Float? // LL97 fee with upgrade and BE credit 2027-2029
  
  /// @DtoReadOnly
  /// @example 83650.00
  adjustedAnnualFee2030to2034 Float? // LL97 fee with upgrade 2030-2034
  
  /// @DtoReadOnly
  /// @example 296750.00
  adjustedAnnualFee2035to2039 Float? // LL97 fee with upgrade 2035-2039
  
  /// @DtoReadOnly
  /// @example 307950.00
  adjustedAnnualFee2040to2049 Float? // LL97 fee with upgrade 2040-2049

  // Section 8 - Financial Analysis
  /// @DtoReadOnly
  /// @example 253500.00
  annualLL97FeeAvoidance2024to2027 Float? // Annual fee savings 2024-2027
  
  /// @DtoReadOnly
  /// @example 242800.00
  annualLL97FeeAvoidance2027to2029 Float? // Annual fee savings 2027-2029
  
  /// @DtoReadOnly
  /// @example 200600.00
  annualLL97FeeAvoidance2030to2034 Float? // Annual fee savings 2030-2034
  
  /// @DtoReadOnly
  /// @example 20700.00
  annualLL97FeeAvoidance2035to2039 Float? // Annual fee savings 2035-2039
  
  /// @DtoReadOnly
  /// @example 20700.00
  annualLL97FeeAvoidance2040to2049 Float? // Annual fee savings 2040-2049
  
  /// @DtoReadOnly
  /// @example 2037
  simplePaybackPeriod Int? // Year when cumulative savings equal retrofit cost
  
  /// @DtoReadOnly
  cumulativeSavingsByYear Json? // Array of cumulative savings by year
  
  /// @DtoReadOnly
  loanBalanceByYear Json? // Array of remaining loan balance by year
  
  /// @DtoReadOnly
  /// @example 4223.50
  monthlyPayment Float? // Monthly loan payment
  
  /// @DtoReadOnly
  /// @example 260235.00
  totalInterestPaid Float? // Total interest paid over loan term

  // Section 9 - NOI Analysis
  /// @DtoReadOnly
  /// @example 1200000.00
  annualBuildingNOI Float? // Annual Building Net Operating Income
  
  /// @example true
  isRentStabilized Boolean? // Whether the building has rent-stabilized units
  
  /// @DtoReadOnly
  noiByYearNoUpgrade Json? // Year-by-year NOI without upgrade: [{year: 2024, noi: 1200000}, ...]
  
  /// @DtoReadOnly
  noiByYearWithUpgrade Json? // Year-by-year NOI with upgrade: [{year: 2024, noi: 1250000}, ...]

  // Section 10 - Property Value Analysis
  /// @DtoReadOnly
  /// @example 22500000.00
  propertyValueNoUpgrade Float? // Property value without upgrade
  
  /// @DtoReadOnly
  /// @example 30150000.00
  propertyValueWithUpgrade Float? // Property value with upgrade
  
  /// @DtoReadOnly
  /// @example 7650000.00
  netPropertyValueGain Float? // Net property value increase from upgrade
  
  /// @DtoReadOnly
  propertyValueByYearNoUpgrade Json? // Year-by-year property value without upgrade: [{year: 2024, value: 30000000}, ...]
  
  /// @DtoReadOnly
  propertyValueByYearWithUpgrade Json? // Year-by-year property value with upgrade: [{year: 2024, value: 31250000}, ...]

  // Service Metadata
  /// @DtoReadOnly
  overriddenFields Json? // Object tracking which fields have been overridden
  
  /// @DtoReadOnly
  lastCalculatedService String? // Which service was last calculated
  
  /// @DtoReadOnly
  serviceVersions Json? // Service versions for tracking compatibility

  /// @example "65.5"
  siteEUI String

  /// @example "95"  
  occupancyRate String

  /// @example "75000"
  maintenanceCost String

  /// @example {"field1": "value1", "field2": "value2"}
  rawPlutoData Json? // Raw PLUTO API response

  /// @example {"field1": "value1", "field2": "value2"}  
  rawLL84Data Json? // Raw LL84 API response

  /// @DtoReadOnly
  createdAt DateTime @default(now())

  /// @DtoReadOnly  
  updatedAt DateTime @updatedAt

  /// @DtoRelationIgnore
  users UserCalculations[]

  @@index([bbl])
}

model UserCalculations {
  id            String       @id @default(uuid())
  userId        String
  calculationId String
  calculation   Calculations @relation(fields: [calculationId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([userId, calculationId])
}
